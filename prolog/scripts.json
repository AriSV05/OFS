[
    {
      "id": 1,
      "script": "function* numberGenerator(init = 0, increment = 1, maxIterations = 1000000) {\nlet current = init;\nlet iterations = 0;\nwhile (iterations < maxIterations) {\nyield current;\ncurrent += increment;\niterations++; } }\n\nfunction* filter(generator, predicate) {\nfor (const num of generator) {\nif (predicate(num)) {\nyield num;\n}\n} }\n\nfunction* cut(generator, limit) {\nlet count = 0;\nfor (const num of generator) {\nif (count >= limit) { return; }\nyield num;\ncount++;\n} }\n\nfunction map(generator, f) {\nconst mappedArray = [];\nfor (const num of generator) {\nmappedArray.push(f(num));\n}\nreturn mappedArray; }\n\n\nconst nats = numberGenerator(0, 1);\nconst even = filter(nats, (n) => n % 2 === 0);\nconst evenLessThanEleven = filter(even, (n) => n < 11);\nconst cutNumbers = cut(evenLessThanEleven, 10);\nconst result = map(cutNumbers, (n) => n);\nconsole.log(result);"
    },
    {
      "id": 2,
      "script": "function* numberGenerator(init = 0, increment = 1, maxIterations = 1000000) {\nlet current = init;\nlet iterations = 0;\nwhile (iterations < maxIterations) {\nyield current;\ncurrent += increment;\niterations++; } }\n\nfunction* filter(generator, predicate) {\nfor (const num of generator) {\nif (predicate(num)) {\nyield num;\n}\n} }\n\nfunction* cut(generator, limit) {\nlet count = 0;\nfor (const num of generator) {\nif (count >= limit) { return; }\nyield num;\ncount++;\n} }\n\nfunction map(generator, f) {\nconst mappedArray = [];\nfor (const num of generator) {\nmappedArray.push(f(num));\n}\nreturn mappedArray; }\n\n\nconst nats = numberGenerator(0, 1);\nconst even = filter(nats, (n) => n % 2 === 0);\nconst evenGreaterThanTen = filter(even, (n) => n > 10);\nconst onlyFiveAfterTen = cut(evenGreaterThanTen, 5);\nconst result = map(onlyFiveAfterTen, (n) => n);\nconsole.log(result);"
    }
  ]
  
  